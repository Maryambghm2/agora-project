generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id_role     Int          @id @default(autoincrement())
  name        String       @unique @default("Utilisateur")
  permissions Permission[]
  users       User[]

  @@map("roles")
}

model User {
  id_user       Int            @id @default(autoincrement())
  username      String         @unique
  bio           String?
  mail          String         @unique
  password      String
  roleId        Int
  collectionId  Int?
  articles      Article[]
  categories    Category[]
  collections   Collection[]
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  role          Role           @relation(fields: [roleId], references: [id_role])

  @@map("users")
}

model Permission {
  id_permission    Int     @id @default(autoincrement())
  name             String  @unique
  write_permission Boolean
  read_permission  Boolean
  roleId           Int
  role             Role    @relation(fields: [roleId], references: [id_role])

  @@map("permissions")
}

model Article {
  id_article        Int          @id @default(autoincrement())
  title             String
  content           String
  creation_date     DateTime     @default(now())
  modification_date DateTime?
  userId            Int
  categoryId        Int
  category          Category     @relation(fields: [categoryId], references: [id_category])
  user              User         @relation(fields: [userId], references: [id_user])
  collections       Collection[]
  comments          Comment[]
  likes             Like[]

  @@map("articles")
}

model Category {
  id_category Int       @id @default(autoincrement())
  name        String    @unique
  userId      Int
  articles    Article[]
  user        User      @relation(fields: [userId], references: [id_user])

  @@map("categories")
}

model Comment {
  id_comment    Int      @id @default(autoincrement())
  content       String
  creation_date DateTime @default(now())
  userId        Int
  articleId     Int
  article       Article  @relation(fields: [articleId], references: [id_article])
  user          User     @relation(fields: [userId], references: [id_user])

  @@map("comments")
}

model Like {
  id_like   Int      @id @default(autoincrement())
  like_date DateTime @default(now())
  articleId Int
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id_article])
  user      User     @relation(fields: [userId], references: [id_user])

  @@map("likes")
}

model Notification {
  id_notification   Int      @id @default(autoincrement())
  type              String
  message           String?
  notification_date DateTime @default(now())
  read_status       Boolean  @default(false)
  userId            Int
  user              User     @relation(fields: [userId], references: [id_user])

  @@map("notifications")
}

model Collection {
  articleId     Int
  id_collection Int     @id @default(autoincrement())
  userId        Int
  article       Article @relation(fields: [articleId], references: [id_article])
  user          User    @relation(fields: [userId], references: [id_user])

  @@map("collection")
}
